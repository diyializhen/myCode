/*
//两个符号之间的字符,如<>之间
/<[^<]+?>/

//非空的整型
/^(0|\-?[1-9]{1}\d*)$/

//可以为空的整型
/(^(0|\-?[1-9]{1}\d*)$)|(^$)/

//正整数
/^[1-9]|[1-9][0-9]*$/

//浮点数
/^(-?\d+)(\.\d+)?$/

//正浮点数
/^([1-9]+(\.\d+)?|0\.\d+)$/

//非负浮点数,保留三位
/^\d+(\.\d{1,3})?$/

*/

// 邮箱
function isEmail(s) {
    return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(s);
}

// 手机号
function isMobile(s) {
    return /^1[3-9]\d{9}$/.test(s);
}

// 链接,子表达式会匹配出链接的各个部分
function isURL(s) {
    return /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.test(s);
}

// 电话号码
function isPhone(s) {
    return /^(((0\d{2}-)?\d{8}(-\d{1,4})?)|((0\d{3}-)?\d{7,8}(-\d{1,4})?))$/.test(s);
}

// 中文（也包含日文和韩文）
function isChinese(s) {
    return /^[\u4E00-\u9FA5\uF900-\uFA2D]+$/.test(s);
}
// 车牌号校验，包含新能源
/*
1、传统车牌
第1位为省份简称（汉字），第二位为发牌机关代号（A-Z的字母）第3到第7位为序号（由字母或数字组成，但不存在字母I和O，另外最后一位可能是“挂学警港澳使领”中的一个汉字）。
2、新能源车牌
第1位和第2位与传统车牌一致，第3到第8位为序号（比传统车牌多一位）。新能源车牌的序号规则如下：
小型车：第1位只能是字母D或F（D代表纯电动新能源汽车，F代表非纯电动新能源汽车），第2为可以是数字或字母，第3到6位必须是数字。
大型车：第1位到第5位必须是数字，第6位只能是字母D或F。
*/
function isLicensePlate(s) {
    return /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z](([A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳使领])|(([DF][A-HJ-NP-Z0-9][0-9]{4})|([0-9]{5}[DF])))$/.test(s);
}

// 身份证
function IdCodeValid(code){
    // 身份证号合法性验证
    // 支持15位和18位身份证号
    // 支持地址编码、出生日期、校验位验证
    var city={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江 ",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北 ",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏 ",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外 "};
    var row = {
        'pass': true,
        'msg': '验证成功'
    };
    if (!code || !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d{3}(\d|[xX])$/.test(code)) {
        row = {
            'pass': false,
            'msg': '身份证号格式错误'
        };
    } else if (!city[code.substr(0, 2)]) {
        row = {
            'pass': false,
            'msg': '身份证号地址编码错误'
        };
    } else {
        //18位身份证需要验证最后一位校验位
        if (code.length == 18) {
            code = code.split('');
            //∑(ai×Wi)(mod 11)
            //加权因子
            var factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
            //校验位
            var parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];
            var sum = 0;
            var ai = 0;
            var wi = 0;
            for (var i = 0; i < 17; i++) {
                ai = code[i];
                wi = factor[i];
                sum += ai * wi;
            }
            if (parity[sum % 11] != code[17].toUpperCase()) {
                row = {
                    'pass': false,
                    'msg': '身份证号校验位错误'
                };
            }
        }
    }
    return row;
}